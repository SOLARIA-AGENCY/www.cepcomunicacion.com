# CMS Dockerfile - Payload CMS Backend
# Multi-stage build for optimized production image

# ========================================
# STAGE 1: Dependencies
# ========================================
ARG NODE_VERSION=20
FROM node:${NODE_VERSION}-alpine AS deps

# Install build dependencies
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    git

WORKDIR /app

# Copy package files
COPY package*.json ./
COPY apps/cms/package*.json ./apps/cms/
COPY packages/ ./packages/

# Install dependencies (including devDependencies for build)
RUN npm ci --workspace=cms --include-workspace-root

# ========================================
# STAGE 2: Builder
# ========================================
FROM node:${NODE_VERSION}-alpine AS builder

WORKDIR /app

# Copy dependencies
COPY --from=deps /app/node_modules ./node_modules
COPY --from=deps /app/apps/cms/node_modules ./apps/cms/node_modules

# Copy source code
COPY apps/cms ./apps/cms
COPY packages ./packages
COPY tsconfig.json ./

# Build the application
WORKDIR /app/apps/cms
RUN npm run build

# ========================================
# STAGE 3: Production
# ========================================
FROM node:${NODE_VERSION}-alpine

# Install runtime dependencies
RUN apk add --no-cache \
    tini \
    wget \
    curl \
    postgresql-client

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001

WORKDIR /app

# Copy production dependencies
COPY --from=deps /app/node_modules ./node_modules
COPY --from=deps /app/apps/cms/node_modules ./apps/cms/node_modules
COPY --from=deps /app/packages ./packages

# Copy built application
COPY --from=builder /app/apps/cms/dist ./apps/cms/dist
COPY --from=builder /app/apps/cms/package.json ./apps/cms/

# Create uploads directory
RUN mkdir -p /app/uploads && chown -R nodejs:nodejs /app

# Switch to non-root user
USER nodejs

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD wget --quiet --tries=1 --spider http://localhost:3000/api/health || exit 1

# Use tini to handle signals properly
ENTRYPOINT ["/sbin/tini", "--"]

# Start the application
WORKDIR /app/apps/cms
CMD ["node", "dist/server.js"]
